package com.example.myapplication

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.myapplication.dto.WalletDTO
import com.example.myapplication.viewmodel.WalletViewModel
import java.math.BigDecimal

class RechargeActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            val walletViewModel: WalletViewModel = viewModel()
            
            RechargeScreen(
                walletViewModel = walletViewModel,
                onBackClick = { finish() }
            )
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun RechargeScreen(
    walletViewModel: WalletViewModel,
    onBackClick: () -> Unit
) {
    val walletData by walletViewModel.getWalletData().observeAsState()
    val isLoading by walletViewModel.getIsLoading().observeAsState(false)
    val errorMessage by walletViewModel.getErrorMessage().observeAsState()
    
    var selectedAmount by remember { mutableStateOf(BigDecimal("12.00")) }
    var showSuccessDialog by remember { mutableStateOf(false) }
    
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.White)
    ) {
        Column(
            modifier = Modifier.fillMaxSize()
        ) {
            // È°∂ÈÉ®ÂØºËà™Ê†è
            TopAppBar(
                title = {
                    Text(
                        text = "ÂÖÖÂÄº",
                        fontSize = 18.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color.White
                    )
                },
                navigationIcon = {
                    IconButton(onClick = onBackClick) {
                        Icon(
                            imageVector = Icons.Default.ArrowBack,
                            contentDescription = "ËøîÂõû",
                            tint = Color.White
                        )
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = Color(0xFF424242)
                )
            )
            
            // ÂÜÖÂÆπÂå∫Âüü
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .verticalScroll(rememberScrollState())
                    .padding(16.dp)
            ) {
                // ÂΩìÂâç‰ΩôÈ¢ù
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF1976D2)),
                    elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
                ) {
                    Column(
                        modifier = Modifier.padding(20.dp),
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Text(
                            text = "ÂΩìÂâç‰ΩôÈ¢ù",
                            fontSize = 16.sp,
                            color = Color.White
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        if (isLoading) {
                            CircularProgressIndicator(
                                color = Color.White,
                                strokeWidth = 2.dp
                            )
                        } else {
                            Text(
                                text = "${walletData?.balance?.toInt() ?: 0} ü™ô",
                                fontSize = 24.sp,
                                fontWeight = FontWeight.Bold,
                                color = Color.White
                            )
                        }
                    }
                }
                
                Spacer(modifier = Modifier.height(24.dp))
                
                // ÂÖÖÂÄºÈáëÈ¢ùÈÄâÊã©
                Text(
                    text = "ÈÄâÊã©ÂÖÖÂÄºÈáëÈ¢ù",
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color.Black
                )
                
                Spacer(modifier = Modifier.height(16.dp))
                
                val amounts = listOf(
                    BigDecimal("6.00") to "6ÂÖÉ",
                    BigDecimal("12.00") to "12ÂÖÉ",
                    BigDecimal("30.00") to "30ÂÖÉ",
                    BigDecimal("68.00") to "68ÂÖÉ",
                    BigDecimal("128.00") to "128ÂÖÉ",
                    BigDecimal("328.00") to "328ÂÖÉ"
                )
                
                // ÈáëÈ¢ùÈÄâÊã©ÁΩëÊ†º
                for (i in 0 until amounts.size step 2) {
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.spacedBy(12.dp)
                    ) {
                        for (j in 0 until 2) {
                            val index = i + j
                            if (index < amounts.size) {
                                val (amount, label) = amounts[index]
                                val isSelected = selectedAmount == amount
                                
                                Card(
                                    modifier = Modifier
                                        .weight(1f)
                                        .height(60.dp)
                                        .clickable { selectedAmount = amount },
                                    colors = CardDefaults.cardColors(
                                        containerColor = if (isSelected) Color(0xFFE3F2FD) else Color.White
                                    ),
                                    elevation = CardDefaults.cardElevation(
                                        defaultElevation = if (isSelected) 4.dp else 2.dp
                                    )
                                ) {
                                    Box(
                                        modifier = Modifier.fillMaxSize(),
                                        contentAlignment = Alignment.Center
                                    ) {
                                        Text(
                                            text = label,
                                            fontSize = 16.sp,
                                            fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Normal,
                                            color = if (isSelected) Color(0xFF1976D2) else Color.Black
                                        )
                                    }
                                }
                            } else {
                                Spacer(modifier = Modifier.weight(1f))
                            }
                        }
                    }
                    if (i + 2 < amounts.size) {
                        Spacer(modifier = Modifier.height(12.dp))
                    }
                }
                
                Spacer(modifier = Modifier.height(32.dp))
                
                // ÂÖÖÂÄºÊåâÈíÆ
                Button(
                    onClick = {
                        walletViewModel.rechargeWallet(selectedAmount, "ALIPAY")
                        showSuccessDialog = true
                    },
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(50.dp),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color(0xFF1976D2)
                    ),
                    enabled = !isLoading
                ) {
                    if (isLoading) {
                        CircularProgressIndicator(
                            color = Color.White,
                            strokeWidth = 2.dp
                        )
                    } else {
                        Text(
                            text = "ÂÖÖÂÄº ${selectedAmount}ÂÖÉ",
                            fontSize = 16.sp,
                            fontWeight = FontWeight.Bold
                        )
                    }
                }
                
                // ÈîôËØØÊ∂àÊÅØ
                errorMessage?.let { error ->
                    Spacer(modifier = Modifier.height(16.dp))
                    Card(
                        modifier = Modifier.fillMaxWidth(),
                        colors = CardDefaults.cardColors(containerColor = Color(0xFFFFEBEE)),
                        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
                    ) {
                        Text(
                            text = "ÂÖÖÂÄºÂ§±Ë¥•: $error",
                            color = Color(0xFFD32F2F),
                            modifier = Modifier.padding(16.dp)
                        )
                    }
                }
            }
        }
    }
    
    // ÊàêÂäüÂØπËØùÊ°Ü
    if (showSuccessDialog) {
        AlertDialog(
            onDismissRequest = { showSuccessDialog = false },
            title = { Text("ÂÖÖÂÄºÊàêÂäü") },
            text = { Text("ÊÇ®ÁöÑË¥¶Êà∑Â∑≤ÊàêÂäüÂÖÖÂÄº ${selectedAmount}ÂÖÉ") },
            confirmButton = {
                TextButton(
                    onClick = { 
                        showSuccessDialog = false
                        onBackClick()
                    }
                ) {
                    Text("Á°ÆÂÆö")
                }
            }
        )
    }
}